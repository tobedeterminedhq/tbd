// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tbd/service/v1/types.proto

package servicev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TestType:
	//	*Test_Sql
	//	*Test_Unique
	//	*Test_NotNull
	//	*Test_Relationship
	//	*Test_AcceptedValues
	//	*Test_CustomColumn
	TestType isTest_TestType `protobuf_oneof:"test_type"`
}

func (x *Test) Reset() {
	*x = Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tbd_service_v1_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test) ProtoMessage() {}

func (x *Test) ProtoReflect() protoreflect.Message {
	mi := &file_tbd_service_v1_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test.ProtoReflect.Descriptor instead.
func (*Test) Descriptor() ([]byte, []int) {
	return file_tbd_service_v1_types_proto_rawDescGZIP(), []int{0}
}

func (m *Test) GetTestType() isTest_TestType {
	if m != nil {
		return m.TestType
	}
	return nil
}

func (x *Test) GetSql() *TestSQLFile {
	if x, ok := x.GetTestType().(*Test_Sql); ok {
		return x.Sql
	}
	return nil
}

func (x *Test) GetUnique() *TestUnique {
	if x, ok := x.GetTestType().(*Test_Unique); ok {
		return x.Unique
	}
	return nil
}

func (x *Test) GetNotNull() *TestNotNull {
	if x, ok := x.GetTestType().(*Test_NotNull); ok {
		return x.NotNull
	}
	return nil
}

func (x *Test) GetRelationship() *TestRelationship {
	if x, ok := x.GetTestType().(*Test_Relationship); ok {
		return x.Relationship
	}
	return nil
}

func (x *Test) GetAcceptedValues() *TestAcceptedValues {
	if x, ok := x.GetTestType().(*Test_AcceptedValues); ok {
		return x.AcceptedValues
	}
	return nil
}

func (x *Test) GetCustomColumn() *TestCustomColumn {
	if x, ok := x.GetTestType().(*Test_CustomColumn); ok {
		return x.CustomColumn
	}
	return nil
}

type isTest_TestType interface {
	isTest_TestType()
}

type Test_Sql struct {
	Sql *TestSQLFile `protobuf:"bytes,1,opt,name=sql,proto3,oneof"`
}

type Test_Unique struct {
	Unique *TestUnique `protobuf:"bytes,2,opt,name=unique,proto3,oneof"`
}

type Test_NotNull struct {
	NotNull *TestNotNull `protobuf:"bytes,3,opt,name=not_null,json=notNull,proto3,oneof"`
}

type Test_Relationship struct {
	Relationship *TestRelationship `protobuf:"bytes,4,opt,name=relationship,proto3,oneof"`
}

type Test_AcceptedValues struct {
	AcceptedValues *TestAcceptedValues `protobuf:"bytes,5,opt,name=accepted_values,json=acceptedValues,proto3,oneof"`
}

type Test_CustomColumn struct {
	CustomColumn *TestCustomColumn `protobuf:"bytes,6,opt,name=custom_column,json=customColumn,proto3,oneof"`
}

func (*Test_Sql) isTest_TestType() {}

func (*Test_Unique) isTest_TestType() {}

func (*Test_NotNull) isTest_TestType() {}

func (*Test_Relationship) isTest_TestType() {}

func (*Test_AcceptedValues) isTest_TestType() {}

func (*Test_CustomColumn) isTest_TestType() {}

type TestSQLFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath   string   `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	Name       string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	References []string `protobuf:"bytes,4,rep,name=references,proto3" json:"references,omitempty"`
}

func (x *TestSQLFile) Reset() {
	*x = TestSQLFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tbd_service_v1_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSQLFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSQLFile) ProtoMessage() {}

func (x *TestSQLFile) ProtoReflect() protoreflect.Message {
	mi := &file_tbd_service_v1_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSQLFile.ProtoReflect.Descriptor instead.
func (*TestSQLFile) Descriptor() ([]byte, []int) {
	return file_tbd_service_v1_types_proto_rawDescGZIP(), []int{1}
}

func (x *TestSQLFile) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *TestSQLFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestSQLFile) GetReferences() []string {
	if x != nil {
		return x.References
	}
	return nil
}

type TestUnique struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	Model    string `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	Path     string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Column   string `protobuf:"bytes,4,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *TestUnique) Reset() {
	*x = TestUnique{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tbd_service_v1_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestUnique) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestUnique) ProtoMessage() {}

func (x *TestUnique) ProtoReflect() protoreflect.Message {
	mi := &file_tbd_service_v1_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestUnique.ProtoReflect.Descriptor instead.
func (*TestUnique) Descriptor() ([]byte, []int) {
	return file_tbd_service_v1_types_proto_rawDescGZIP(), []int{2}
}

func (x *TestUnique) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *TestUnique) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *TestUnique) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TestUnique) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

type TestNotNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	Model    string `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	Path     string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Column   string `protobuf:"bytes,4,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *TestNotNull) Reset() {
	*x = TestNotNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tbd_service_v1_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestNotNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestNotNull) ProtoMessage() {}

func (x *TestNotNull) ProtoReflect() protoreflect.Message {
	mi := &file_tbd_service_v1_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestNotNull.ProtoReflect.Descriptor instead.
func (*TestNotNull) Descriptor() ([]byte, []int) {
	return file_tbd_service_v1_types_proto_rawDescGZIP(), []int{3}
}

func (x *TestNotNull) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *TestNotNull) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *TestNotNull) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TestNotNull) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

type TestRelationship struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath     string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	SourceModel  string `protobuf:"bytes,2,opt,name=source_model,json=sourceModel,proto3" json:"source_model,omitempty"`
	SourcePath   string `protobuf:"bytes,3,opt,name=source_path,json=sourcePath,proto3" json:"source_path,omitempty"`
	SourceColumn string `protobuf:"bytes,4,opt,name=source_column,json=sourceColumn,proto3" json:"source_column,omitempty"`
	TargetModel  string `protobuf:"bytes,5,opt,name=target_model,json=targetModel,proto3" json:"target_model,omitempty"`
	TargetPath   string `protobuf:"bytes,7,opt,name=target_path,json=targetPath,proto3" json:"target_path,omitempty"`
	TargetColumn string `protobuf:"bytes,8,opt,name=target_column,json=targetColumn,proto3" json:"target_column,omitempty"`
}

func (x *TestRelationship) Reset() {
	*x = TestRelationship{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tbd_service_v1_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestRelationship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRelationship) ProtoMessage() {}

func (x *TestRelationship) ProtoReflect() protoreflect.Message {
	mi := &file_tbd_service_v1_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRelationship.ProtoReflect.Descriptor instead.
func (*TestRelationship) Descriptor() ([]byte, []int) {
	return file_tbd_service_v1_types_proto_rawDescGZIP(), []int{4}
}

func (x *TestRelationship) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *TestRelationship) GetSourceModel() string {
	if x != nil {
		return x.SourceModel
	}
	return ""
}

func (x *TestRelationship) GetSourcePath() string {
	if x != nil {
		return x.SourcePath
	}
	return ""
}

func (x *TestRelationship) GetSourceColumn() string {
	if x != nil {
		return x.SourceColumn
	}
	return ""
}

func (x *TestRelationship) GetTargetModel() string {
	if x != nil {
		return x.TargetModel
	}
	return ""
}

func (x *TestRelationship) GetTargetPath() string {
	if x != nil {
		return x.TargetPath
	}
	return ""
}

func (x *TestRelationship) GetTargetColumn() string {
	if x != nil {
		return x.TargetColumn
	}
	return ""
}

type TestAcceptedValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath       string   `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	Model          string   `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	Path           string   `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Column         string   `protobuf:"bytes,4,opt,name=column,proto3" json:"column,omitempty"`
	AcceptedValues []string `protobuf:"bytes,5,rep,name=accepted_values,json=acceptedValues,proto3" json:"accepted_values,omitempty"`
}

func (x *TestAcceptedValues) Reset() {
	*x = TestAcceptedValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tbd_service_v1_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestAcceptedValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestAcceptedValues) ProtoMessage() {}

func (x *TestAcceptedValues) ProtoReflect() protoreflect.Message {
	mi := &file_tbd_service_v1_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestAcceptedValues.ProtoReflect.Descriptor instead.
func (*TestAcceptedValues) Descriptor() ([]byte, []int) {
	return file_tbd_service_v1_types_proto_rawDescGZIP(), []int{5}
}

func (x *TestAcceptedValues) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *TestAcceptedValues) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *TestAcceptedValues) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TestAcceptedValues) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *TestAcceptedValues) GetAcceptedValues() []string {
	if x != nil {
		return x.AcceptedValues
	}
	return nil
}

type TestCustomColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestFilePath string            `protobuf:"bytes,1,opt,name=test_file_path,json=testFilePath,proto3" json:"test_file_path,omitempty"`
	TestName     string            `protobuf:"bytes,2,opt,name=test_name,json=testName,proto3" json:"test_name,omitempty"`
	OriginalSql  string            `protobuf:"bytes,3,opt,name=original_sql,json=originalSql,proto3" json:"original_sql,omitempty"`
	Model        string            `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	Path         string            `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	Column       string            `protobuf:"bytes,6,opt,name=column,proto3" json:"column,omitempty"`
	Info         map[string]string `protobuf:"bytes,7,rep,name=info,proto3" json:"info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RenderedSql  string            `protobuf:"bytes,8,opt,name=rendered_sql,json=renderedSql,proto3" json:"rendered_sql,omitempty"`
}

func (x *TestCustomColumn) Reset() {
	*x = TestCustomColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tbd_service_v1_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCustomColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCustomColumn) ProtoMessage() {}

func (x *TestCustomColumn) ProtoReflect() protoreflect.Message {
	mi := &file_tbd_service_v1_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCustomColumn.ProtoReflect.Descriptor instead.
func (*TestCustomColumn) Descriptor() ([]byte, []int) {
	return file_tbd_service_v1_types_proto_rawDescGZIP(), []int{6}
}

func (x *TestCustomColumn) GetTestFilePath() string {
	if x != nil {
		return x.TestFilePath
	}
	return ""
}

func (x *TestCustomColumn) GetTestName() string {
	if x != nil {
		return x.TestName
	}
	return ""
}

func (x *TestCustomColumn) GetOriginalSql() string {
	if x != nil {
		return x.OriginalSql
	}
	return ""
}

func (x *TestCustomColumn) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *TestCustomColumn) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TestCustomColumn) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *TestCustomColumn) GetInfo() map[string]string {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *TestCustomColumn) GetRenderedSql() string {
	if x != nil {
		return x.RenderedSql
	}
	return ""
}

type Seed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FilePath string `protobuf:"bytes,2,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
}

func (x *Seed) Reset() {
	*x = Seed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tbd_service_v1_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Seed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Seed) ProtoMessage() {}

func (x *Seed) ProtoReflect() protoreflect.Message {
	mi := &file_tbd_service_v1_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Seed.ProtoReflect.Descriptor instead.
func (*Seed) Descriptor() ([]byte, []int) {
	return file_tbd_service_v1_types_proto_rawDescGZIP(), []int{7}
}

func (x *Seed) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Seed) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

type Model struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string              `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	FilePath    string              `protobuf:"bytes,3,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	Columns     []*Model_ModelColum `protobuf:"bytes,5,rep,name=columns,proto3" json:"columns,omitempty"`
	References  []string            `protobuf:"bytes,6,rep,name=references,proto3" json:"references,omitempty"`
}

func (x *Model) Reset() {
	*x = Model{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tbd_service_v1_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Model) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model) ProtoMessage() {}

func (x *Model) ProtoReflect() protoreflect.Message {
	mi := &file_tbd_service_v1_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model.ProtoReflect.Descriptor instead.
func (*Model) Descriptor() ([]byte, []int) {
	return file_tbd_service_v1_types_proto_rawDescGZIP(), []int{8}
}

func (x *Model) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Model) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Model) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *Model) GetColumns() []*Model_ModelColum {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *Model) GetReferences() []string {
	if x != nil {
		return x.References
	}
	return nil
}

type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Path        string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// TODO Replace File path references with whole file references
	FilePath string                 `protobuf:"bytes,4,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	Columns  []*Source_SourceColumn `protobuf:"bytes,5,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tbd_service_v1_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_tbd_service_v1_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_tbd_service_v1_types_proto_rawDescGZIP(), []int{9}
}

func (x *Source) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Source) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Source) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Source) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *Source) GetColumns() []*Source_SourceColumn {
	if x != nil {
		return x.Columns
	}
	return nil
}

type Model_ModelColum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Model_ModelColum) Reset() {
	*x = Model_ModelColum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tbd_service_v1_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Model_ModelColum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model_ModelColum) ProtoMessage() {}

func (x *Model_ModelColum) ProtoReflect() protoreflect.Message {
	mi := &file_tbd_service_v1_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model_ModelColum.ProtoReflect.Descriptor instead.
func (*Model_ModelColum) Descriptor() ([]byte, []int) {
	return file_tbd_service_v1_types_proto_rawDescGZIP(), []int{8, 0}
}

func (x *Model_ModelColum) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Model_ModelColum) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type Source_SourceColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Source_SourceColumn) Reset() {
	*x = Source_SourceColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tbd_service_v1_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source_SourceColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source_SourceColumn) ProtoMessage() {}

func (x *Source_SourceColumn) ProtoReflect() protoreflect.Message {
	mi := &file_tbd_service_v1_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source_SourceColumn.ProtoReflect.Descriptor instead.
func (*Source_SourceColumn) Descriptor() ([]byte, []int) {
	return file_tbd_service_v1_types_proto_rawDescGZIP(), []int{9, 0}
}

func (x *Source_SourceColumn) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Source_SourceColumn) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

var File_tbd_service_v1_types_proto protoreflect.FileDescriptor

var file_tbd_service_v1_types_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x74, 0x62, 0x64, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x74, 0x62,
	0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x22, 0x94, 0x03, 0x0a,
	0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x62, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x51, 0x4c, 0x46, 0x69, 0x6c, 0x65, 0x48,
	0x00, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x12, 0x34, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x62, 0x64, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x08,
	0x6e, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x74, 0x62, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x6e,
	0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x46, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74,
	0x62, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x48, 0x00,
	0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x4d,
	0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x62, 0x64, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x47, 0x0a,
	0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x62, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x5e, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x53, 0x51, 0x4c, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x22, 0x6b, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x22, 0x6c, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x81,
	0x02, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x22, 0x9c, 0x01, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0xd6, 0x02, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x71, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x71, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x3e,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74,
	0x62, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x2e, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x71, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x53, 0x71,
	0x6c, 0x1a, 0x37, 0x0a, 0x09, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x37, 0x0a, 0x04, 0x53, 0x65,
	0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x22, 0xfc, 0x01, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x3a, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x74, 0x62, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x44, 0x0a, 0x0a,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xf6, 0x01, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x62, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x1a, 0x46, 0x0a, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x42, 0x50, 0x01, 0x5a,
	0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x65, 0x6e, 0x66,
	0x64, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x62, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x62, 0x64, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tbd_service_v1_types_proto_rawDescOnce sync.Once
	file_tbd_service_v1_types_proto_rawDescData = file_tbd_service_v1_types_proto_rawDesc
)

func file_tbd_service_v1_types_proto_rawDescGZIP() []byte {
	file_tbd_service_v1_types_proto_rawDescOnce.Do(func() {
		file_tbd_service_v1_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_tbd_service_v1_types_proto_rawDescData)
	})
	return file_tbd_service_v1_types_proto_rawDescData
}

var file_tbd_service_v1_types_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_tbd_service_v1_types_proto_goTypes = []interface{}{
	(*Test)(nil),                // 0: tbd.service.v1.Test
	(*TestSQLFile)(nil),         // 1: tbd.service.v1.TestSQLFile
	(*TestUnique)(nil),          // 2: tbd.service.v1.TestUnique
	(*TestNotNull)(nil),         // 3: tbd.service.v1.TestNotNull
	(*TestRelationship)(nil),    // 4: tbd.service.v1.TestRelationship
	(*TestAcceptedValues)(nil),  // 5: tbd.service.v1.TestAcceptedValues
	(*TestCustomColumn)(nil),    // 6: tbd.service.v1.TestCustomColumn
	(*Seed)(nil),                // 7: tbd.service.v1.Seed
	(*Model)(nil),               // 8: tbd.service.v1.Model
	(*Source)(nil),              // 9: tbd.service.v1.Source
	nil,                         // 10: tbd.service.v1.TestCustomColumn.InfoEntry
	(*Model_ModelColum)(nil),    // 11: tbd.service.v1.Model.ModelColum
	(*Source_SourceColumn)(nil), // 12: tbd.service.v1.Source.SourceColumn
}
var file_tbd_service_v1_types_proto_depIdxs = []int32{
	1,  // 0: tbd.service.v1.Test.sql:type_name -> tbd.service.v1.TestSQLFile
	2,  // 1: tbd.service.v1.Test.unique:type_name -> tbd.service.v1.TestUnique
	3,  // 2: tbd.service.v1.Test.not_null:type_name -> tbd.service.v1.TestNotNull
	4,  // 3: tbd.service.v1.Test.relationship:type_name -> tbd.service.v1.TestRelationship
	5,  // 4: tbd.service.v1.Test.accepted_values:type_name -> tbd.service.v1.TestAcceptedValues
	6,  // 5: tbd.service.v1.Test.custom_column:type_name -> tbd.service.v1.TestCustomColumn
	10, // 6: tbd.service.v1.TestCustomColumn.info:type_name -> tbd.service.v1.TestCustomColumn.InfoEntry
	11, // 7: tbd.service.v1.Model.columns:type_name -> tbd.service.v1.Model.ModelColum
	12, // 8: tbd.service.v1.Source.columns:type_name -> tbd.service.v1.Source.SourceColumn
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_tbd_service_v1_types_proto_init() }
func file_tbd_service_v1_types_proto_init() {
	if File_tbd_service_v1_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tbd_service_v1_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tbd_service_v1_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSQLFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tbd_service_v1_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestUnique); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tbd_service_v1_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestNotNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tbd_service_v1_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestRelationship); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tbd_service_v1_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestAcceptedValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tbd_service_v1_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCustomColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tbd_service_v1_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Seed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tbd_service_v1_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Model); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tbd_service_v1_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tbd_service_v1_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Model_ModelColum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tbd_service_v1_types_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source_SourceColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tbd_service_v1_types_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Test_Sql)(nil),
		(*Test_Unique)(nil),
		(*Test_NotNull)(nil),
		(*Test_Relationship)(nil),
		(*Test_AcceptedValues)(nil),
		(*Test_CustomColumn)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tbd_service_v1_types_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tbd_service_v1_types_proto_goTypes,
		DependencyIndexes: file_tbd_service_v1_types_proto_depIdxs,
		MessageInfos:      file_tbd_service_v1_types_proto_msgTypes,
	}.Build()
	File_tbd_service_v1_types_proto = out.File
	file_tbd_service_v1_types_proto_rawDesc = nil
	file_tbd_service_v1_types_proto_goTypes = nil
	file_tbd_service_v1_types_proto_depIdxs = nil
}
